name: Deploy Ghost CMS to AWS

on:
  push:
    branches:
      - main


jobs:
  semgrep_scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep scan on Terraform
        id: semgrep
        run: semgrep --config p/terraform --json > semgrep-results.json

      - name: Send results to Slack
        run: |
          findings=$(jq -r '.results | length' semgrep-results.json)
          if [ "$findings" -gt 0 ]; then
            summary=$(jq -r '.results[] | "\(.check_id): \(.message) in \(.path):\(.start.line)"' semgrep-results.json | head -n 5)
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"ðŸš¨ Semgrep found *$findings* issue(s):\n$summary\n\n(Only showing first 5 results)\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"âœ… Semgrep scan completed. No issues found."}' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
  deploy:
    needs: semgrep_scan
    if: success() && needs.semgrep_scan.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
  terraform:
    name: Deploy to AWS with Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
